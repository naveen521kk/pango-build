name: Build Pango
on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
jobs:
  update-version:
    name: Update Version
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Get Latest
        run: |
          cd updator
          python -m pip install -r requirements.txt
          python main.py
      - name: Check for modified files
        shell: bash
        id: git-check
        run: |
          git status
          echo "::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)"
      - name: Commit Changes
        shell: pwsh
        if: steps.git-check.outputs.modified == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          update: ${{ steps.git-check.outputs.modified }}
        run: |
          echo $update
          cd updator
          python -m pip install -r requirements.txt
          git config --local user.email "49693820+naveen521kk@users.noreply.github.com"
          git config --local user.name "Naveen"
          git commit -m "$(python commit.py)" -a
      - name: Push changes
        if: steps.git-check.outputs.modified == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
  build-windows:
    name: Build Pango On Windows
    runs-on: windows-2019
    env:
      MSYS2_PATH_TYPE: inherit
      WORKSPACE: ${{ github.workspace }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x86"
      - name: Update Version
        run: |
          cd updator
          pip install -r requirements.txt
          python main.py
      - name: Download and Copy Necessary Files
        shell: powershell
        run: ci/win/download.ps1
      - name: Build x86
        run: |
          cd x86
          $prevPath = $env:PATH
          & "$env:WORKSPACE\ci\win\build.ps1" 32
          $env:PATH=$prevPath
          cd ../
      - name: Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"
      - name: Build x64
        run: |
          cd x64
          $prevPath = $env:PATH
          & "$env:WORKSPACE\ci\win\build.ps1" 64
          $env:PATH = $prevPath
          cd ../
      - name: Pack Assets
        run: |
          7z a pango-build-x86.zip C:\build\x86\*
          7z a pango-build-x64.zip C:\build\amd64\*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pango-build-x86
          path: pango-build-x86.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pango-build-x64
          path: pango-build-x64.zip

  build-linux:
    name: Build Pango On Ubuntu
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install expat
        run: |
          sudo apt-get install -y gperf
      - name: Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Get Latest
        run: |
          cd updator
          pip install -r requirements.txt
          python main.py
      - name: Build
        run: |
          python3 -m pip install -U pip
          python3 -m pip install requests
          python3 ci/linux-build.py amd64
          cd dist/amd64
          7z a pango-build-linux.zip *
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pango-build-linux
          path: dist/amd64/pango-build-linux.zip
  release:
    name: Release
    needs: [build-windows, build-linux]
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
      - name: Setup-Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Check Release
        id: check_release
        shell: bash
        run: |
          cd updator
          pip install -r requirements.txt
          python main.py
          a=$(python check_update.py)
          echo $a
          python check_update.py
          echo "::set-output name=update_things::$a"
      - name: Download Linux Build
        uses: actions/download-artifact@v1
        with:
          name: pango-build-linux
      - name: Download Windows Build x64
        uses: actions/download-artifact@v1
        with:
          name: pango-build-x64
      - name: Download Windows Build x86
        uses: actions/download-artifact@v1
        with:
          name: pango-build-x86
      - name: Get Release Details
        id: get_version
        run: |
          $version = Get-Content .\versions.json | ConvertFrom-Json
          echo "::set-output name=pango::$($version.pango)"
          echo "::set-output name=glib::$($version.glib)"
          echo "::set-output name=cairo::$($version.cairo)"
          echo "::set-output name=fribidi::$($version.fribidi)"
          echo "::set-output name=harfbuzz::$($version.harfbuzz)"
          echo "::set-output name=fontconfig::$($version.fontconfig)"
      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.update_things == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.pango }}
          release_name: Release v${{ steps.get_version.outputs.pango }}
          body: |
            This release contains
              - Pango ${{ steps.get_version.outputs.pango }}
              - Cairo ${{ steps.get_version.outputs.cairo }}
              - Glib ${{ steps.get_version.outputs.glib }}
              - Fribidi ${{ steps.get_version.outputs.fribidi }}
              - Harfbuzz ${{ steps.get_version.outputs.harfbuzz }}
              - FontConfig ${{ steps.get_version.outputs.fontconfig }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: steps.check_release.outputs.update_things == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: pango-build-x86\pango-build-x86.zip
          asset_name: pango-build-win32.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: steps.check_release.outputs.update_things == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: pango-build-x64\pango-build-x64.zip
          asset_name: pango-build-win64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: steps.check_release.outputs.update_things == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: pango-build-linux\pango-build-linux.zip
          asset_name: pango-build-linux.zip
          asset_content_type: application/zip
